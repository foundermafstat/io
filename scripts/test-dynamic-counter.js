const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3000';

async function testDynamicCounter() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞...\n');

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å —Ä–∞–∑–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
    console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å —Ä–∞–∑–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏...');
    
    const testCases = [
      { limit: 5, expected: '5' },
      { limit: 10, expected: '10' },
      { limit: 20, expected: '20' }
    ];

    for (const testCase of testCases) {
      const response = await fetch(`${BASE_URL}/api/properties?limit=${testCase.limit}`);
      const data = await response.json();
      
      if (response.ok) {
        console.log(`   –õ–∏–º–∏—Ç ${testCase.limit}: –Ω–∞–π–¥–µ–Ω–æ ${data.properties?.length || 0} –æ–±—ä–µ–∫—Ç–æ–≤, –≤—Å–µ–≥–æ ${data.totalCount || 0}`);
      } else {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –ª–∏–º–∏—Ç–∞ ${testCase.limit}: ${data.error}`);
      }
    }

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
    console.log('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª...');
    
    const testNumbers = [0, 1, 10, 100, 1000, 10000, 100000, 1000000];
    
    testNumbers.forEach(num => {
      const formatted = num.toLocaleString();
      console.log(`   ${num} -> ${formatted}`);
    });

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...');
    
    const testTranslations = [
      { key: 'properties.foundCount', params: { count: '1,234' }, expected: 'Found properties: 1,234' },
      { key: 'properties.foundCount', params: { count: '0' }, expected: 'Found properties: 0' },
      { key: 'properties.foundCount', params: { count: '999,999' }, expected: 'Found properties: 999,999' }
    ];

    testTranslations.forEach(test => {
      console.log(`   –ö–ª—é—á: ${test.key}`);
      console.log(`   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${JSON.stringify(test.params)}`);
      console.log(`   –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${test.expected}`);
    });

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –ß—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:');
    console.log('   ‚úÖ –§—É–Ω–∫—Ü–∏—è t() —Ç–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
    console.log('   ‚úÖ –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è {count} —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏');
    console.log('   ‚úÖ –°—á–µ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
    console.log('   ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testDynamicCounter();
