const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3000';

async function testCurrencyChanges() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–∞–ª—é—Ç—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n');

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω
    console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω...');
    
    // –°–∏–º—É–ª—è—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω
    const testPrices = [50000, 500000, 1500000, 5000000];
    
    testPrices.forEach(price => {
      let formatted;
      if (price >= 1000000) {
        formatted = `$${(price / 1000000).toFixed(1)}M`;
      } else {
        formatted = `$${(price / 1000).toFixed(0)}K`;
      }
      console.log(`   ${price} -> ${formatted}`);
    });

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    console.log('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    console.log('   –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä: /placeholder.jpg');
    console.log('   ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏');

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å –Ω–æ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏
    console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å –Ω–æ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏...');
    const response = await fetch(`${BASE_URL}/api/properties?limit=3`);
    const data = await response.json();
    
    if (response.ok && data.properties) {
      console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${data.properties.length} –æ–±—ä–µ–∫—Ç–æ–≤`);
      data.properties.forEach((property, index) => {
        console.log(`   –û–±—ä–µ–∫—Ç ${index + 1}:`);
        if (property.rentPrice) {
          const rentFormatted = property.rentPrice >= 1000000 
            ? `$${(property.rentPrice / 1000000).toFixed(1)}M`
            : `$${(property.rentPrice / 1000).toFixed(0)}K`;
          console.log(`     –ê—Ä–µ–Ω–¥–∞: ${rentFormatted}/–º–µ—Å`);
        }
        if (property.salePrice) {
          const saleFormatted = property.salePrice >= 1000000 
            ? `$${(property.salePrice / 1000000).toFixed(1)}M`
            : `$${(property.salePrice / 1000).toFixed(0)}K`;
          console.log(`     –ü—Ä–æ–¥–∞–∂–∞: ${saleFormatted}`);
        }
      });
    } else {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${data.error || 'Unknown error'}`);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –ò–∑–º–µ–Ω–µ–Ω–∏—è:');
    console.log('   ‚úÖ –í–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ —Å —Ä—É–±–ª–µ–π (‚ÇΩ) –Ω–∞ –¥–æ–ª–ª–∞—Ä—ã ($)');
    console.log('   ‚úÖ –§–æ—Ä–º–∞—Ç —Ü–µ–Ω: $500K, $1.5M –≤–º–µ—Å—Ç–æ 500–ö ‚ÇΩ, 1.5–ú ‚ÇΩ');
    console.log('   ‚úÖ –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: /placeholder.jpg');
    console.log('   ‚úÖ –ü–µ—Ä–µ–≤–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testCurrencyChanges();
