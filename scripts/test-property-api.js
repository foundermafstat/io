const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3000';

async function testPropertyAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏...\n');

  try {
    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤
    console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤...');
    const propertiesResponse = await fetch(`${BASE_URL}/api/properties?limit=5`);
    const propertiesData = await propertiesResponse.json();
    
    if (propertiesResponse.ok) {
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${propertiesData.properties?.length || 0} –æ–±—ä–µ–∫—Ç–æ–≤`);
      console.log(`   –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${propertiesData.totalCount || 0}`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${propertiesData.error}`);
    }

    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
    console.log('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤...');
    const citiesResponse = await fetch(`${BASE_URL}/api/properties/cities`);
    const citiesData = await citiesResponse.json();
    
    if (citiesResponse.ok) {
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${citiesData.cities?.length || 0} –≥–æ—Ä–æ–¥–æ–≤`);
      console.log(`   –ì–æ—Ä–æ–¥–∞: ${citiesData.cities?.slice(0, 5).join(', ')}...`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${citiesData.error}`);
    }

    // –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏...');
    const searchResponse = await fetch(`${BASE_URL}/api/properties?operationType=RENT&city=–ú–æ—Å–∫–≤–∞&limit=3`);
    const searchData = await searchResponse.json();
    
    if (searchResponse.ok) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${searchData.properties?.length || 0} –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∞—Ä–µ–Ω–¥—É –≤ –ú–æ—Å–∫–≤–µ`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${searchData.error}`);
    }

    // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (propertiesData.properties && propertiesData.properties.length > 0) {
      const firstProperty = propertiesData.properties[0];
      console.log(`\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ ${firstProperty.id}...`);
      
      const propertyResponse = await fetch(`${BASE_URL}/api/properties/${firstProperty.id}`);
      const propertyData = await propertyResponse.json();
      
      if (propertyResponse.ok) {
        console.log(`‚úÖ –û–±—ä–µ–∫—Ç –ø–æ–ª—É—á–µ–Ω: ${propertyData.title}`);
        console.log(`   –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${propertyData.views}`);
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${propertyData.error}`);
      }
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testPropertyAPI();
