"use client"

import { toast } from "sonner"
import confetti from 'canvas-confetti'
import { animate as framerAnimate } from "framer-motion"
import { useTranslations } from "@/components/translations-context"
import FirecrawlApp, { CrawlResponse } from '@mendable/firecrawl-js';

export const useToolsFunctions = () => {
  const { t } = useTranslations();

  const timeFunction = () => {
    const now = new Date()
    return {
      success: true,
      time: now.toLocaleTimeString(),
      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
      message: t('tools.time') + now.toLocaleTimeString() + " in " + Intl.DateTimeFormat().resolvedOptions().timeZone + " timezone."
    }
  }

  const backgroundFunction = () => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º next-themes –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–º–µ–Ω—ã —Ç–µ–º—ã
      const event = new CustomEvent('themeToggle');
      document.dispatchEvent(event);

      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å localStorage
      const currentTheme = localStorage.getItem('theme') || 'system';
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';

      localStorage.setItem('theme', newTheme);

      // –û–±–Ω–æ–≤–ª—è–µ–º data-theme –∞—Ç—Ä–∏–±—É—Ç
      document.documentElement.setAttribute('data-theme', newTheme);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã
      if (newTheme === 'dark') {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }

      toast(`Switched to ${newTheme} mode! üåì`, {
        description: t('tools.switchTheme') + newTheme + ".",
      })

      return {
        success: true,
        theme: newTheme,
        message: t('tools.switchTheme') + newTheme + "."
      };
    } catch (error) {
      return {
        success: false,
        message: t('tools.themeFailed') + ": " + error
      };
    }
  }

  const partyFunction = () => {
    try {
      const duration = 5 * 1000
      const colors = ["#a786ff", "#fd8bbc", "#eca184", "#f8deb1", "#3b82f6", "#14b8a6", "#f97316", "#10b981", "#facc15"]
      
      const confettiConfig = {
        particleCount: 30,
        spread: 100,
        startVelocity: 90,
        colors,
        gravity: 0.5
      }

      const shootConfetti = (angle: number, origin: { x: number, y: number }) => {
        confetti({
          ...confettiConfig,
          angle,
          origin
        })
      }

      const animate = () => {
        const now = Date.now()
        const end = now + duration

        const elements = document.querySelectorAll('div, p, button, h1, h2, h3, span, a, img')
        elements.forEach((element, index) => {
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
          setTimeout(() => {
            framerAnimate(element,
              {
                scale: [1, 1.1, 1],
                rotate: [0, 5, -5, 0],
              },
              {
                duration: 0.5,
                repeat: 3,
                ease: "easeInOut"
              }
            )
          }, index * 50) // 50ms –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        })

        const frame = () => {
          if (Date.now() > end) return
          shootConfetti(60, { x: 0, y: 0.5 })
          shootConfetti(120, { x: 1, y: 0.5 })
          requestAnimationFrame(frame)
        }

        const mainElement = document.querySelector('main')
        if (mainElement) {
          mainElement.classList.remove('bg-gradient-to-b', 'from-gray-50', 'to-white')
          const originalBg = mainElement.style.backgroundColor
          
          const changeColor = () => {
            const now = Date.now()
            const end = now + duration
            
            const colorCycle = () => {
              if (Date.now() > end) {
                framerAnimate(mainElement, 
                  { backgroundColor: originalBg },
                  { duration: 0.5 }
                )
                return
              }
              const newColor = colors[Math.floor(Math.random() * colors.length)]
              framerAnimate(mainElement,
                { backgroundColor: newColor },
                { duration: 0.2 }
              )
              setTimeout(colorCycle, 200)
            }
            
            colorCycle()
          }
          
          changeColor()
        }
        
        frame()
      }

      animate()
      toast.success(t('tools.partyMode.toast') + " üéâ", {
        description: t('tools.partyMode.description'),
      })
      return { success: true, message: t('tools.partyMode.success') + " üéâ" }
    } catch (error) {
      return { success: false, message: t('tools.partyMode.failed') + ": " + error }
    }
  }

  const launchWebsite = ({ url }: { url: string }) => {
    window.open(url, '_blank')
    toast(t('tools.launchWebsite') + " üåê", {
      description: t('tools.launchWebsiteSuccess') + url + ", tell the user it's been launched.",
    })
    return {
      success: true,
      message: `Launched the site${url}, tell the user it's been launched.`
    }
  }

  const copyToClipboard = ({ text }: { text: string }) => {
    navigator.clipboard.writeText(text)
    toast(t('tools.clipboard.toast') + " üìã", {
      description: t('tools.clipboard.description'),
    })
    return {
      success: true,
      text,
      message: t('tools.clipboard.success')
    }
  }

  const scrapeWebsite = async ({ url }: { url: string }) => {
    const apiKey = process.env.NEXT_PUBLIC_FIRECRAWL_API_KEY;
    try {
      const app = new FirecrawlApp({ apiKey: apiKey });
      const scrapeResult = await app.scrape(url, { formats: ['markdown', 'html'] }) as CrawlResponse;

      if (!(scrapeResult as any).success) {
        console.log((scrapeResult as any).error)
        return {
          success: false,
          message: `Failed to scrape: ${(scrapeResult as any).error}`
        };
      }

      toast.success(t('tools.scrapeWebsite.toast') + " üìã", {
        description: t('tools.scrapeWebsite.success'),
      })

      return {
        success: true,
        message: "Here is the scraped website content: " + JSON.stringify((scrapeResult as any).data?.markdown) + "Summarize and explain it to the user now in a response."
      };

    } catch (error) {
      return {
        success: false,
        message: `Error scraping website: ${error}`
      };
    }
  }

  const navigateToPage = ({ path }: { path: string }) => {
    try {
      if (path.startsWith('/')) {
        // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è Next.js –Ω–∞–≤–∏–≥–∞—Ü–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        localStorage.setItem('voice-chat-navigation', JSON.stringify({
          path,
          timestamp: Date.now(),
          wasActive: true
        }));

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        localStorage.setItem('voice-chat-session-state', JSON.stringify({
          isActive: true,
          timestamp: Date.now(),
          targetPath: path,
          shouldRestore: true
        }));

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é - Next.js SPA –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
        // –¥–ª—è –≤—Å–µ—Ö –ø—É—Ç–µ–π, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.location.href = path;

        toast.success("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: " + path, {
          description: "–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –Ω–µ –ø—Ä–µ—Ä–≤–µ—Ç—Å—è - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é...",
        })

        return {
          success: true,
          path,
          message: `Navigating to ${path}. Tell the user they are being redirected but the voice chat will continue uninterrupted.`
        };
      } else {
        // –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö URL –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–∏–∑–±–µ–∂–Ω–∞
        localStorage.setItem('voice-chat-continue', JSON.stringify({
          path,
          timestamp: Date.now(),
          wasActive: true
        }));

        window.location.href = path;

        toast("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–∞–π—Ç: " + path, {
          description: "–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–µ—Ä–≤–∞–Ω–∞. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...",
        })

        return {
          success: true,
          path,
          message: `Navigating to external site ${path}. The voice chat session will be interrupted. Tell the user they are being redirected and the session will end.`
        };
      }
    } catch (error) {
      return {
        success: false,
        message: `Error navigating to page: ${error}`
      };
    }
  }

  const findProperty = async ({
    city,
    operationType,
    budget,
    propertyType,
    specialRequirements,
    checkInDate,
    checkOutDate
  }: {
    city: string;
    operationType: string;
    budget: number;
    propertyType: string;
    specialRequirements: string;
    checkInDate?: string;
    checkOutDate?: string;
  }) => {
    try {
      // –°—Ç—Ä–æ–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
      const searchParams = new URLSearchParams();
      searchParams.append('city', city);
      searchParams.append('operationType', operationType);
      searchParams.append('budget', budget.toString());
      searchParams.append('propertyType', propertyType);

      if (specialRequirements) {
        searchParams.append('specialRequirements', specialRequirements);
      }
      if (checkInDate) {
        searchParams.append('checkInDate', checkInDate);
      }
      if (checkOutDate) {
        searchParams.append('checkOutDate', checkOutDate);
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const resultsUrl = `/real-estate/results?${searchParams.toString()}`;

      toast.success("–ü–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω", {
        description: `–ù–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ ${city}`,
      })

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
      navigateToPage({ path: resultsUrl });

      return {
        success: true,
        resultsUrl,
        message: `Found properties in ${city} for ${operationType === 'RENT' ? 'rent' : 'purchase'} within budget of ${budget}. Redirecting to results page.`
      };
    } catch (error) {
      return {
        success: false,
        message: `Error finding properties: ${error}`
      };
    }
  }

  const getPropertyDetails = async ({ propertyId }: { propertyId: string }) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ API
      const response = await fetch(`/api/properties/${propertyId}`);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const property = await response.json();
      
      if (!property.success) {
        throw new Error(property.error || 'Failed to fetch property details');
      }

      const propertyData = property.data;
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
      const description = `
        –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:
        
        üè† –ù–∞–∑–≤–∞–Ω–∏–µ: ${propertyData.title}
        üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${propertyData.city}, ${propertyData.state}, ${propertyData.country}
        üí∞ –¶–µ–Ω–∞: ‚Ç¨${propertyData.operationType === 'RENT' ? propertyData.rentPrice : propertyData.salePrice}${propertyData.operationType === 'RENT' ? ' –≤ –º–µ—Å—è—Ü' : ''}
        üèóÔ∏è –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: ${propertyData.operationType === 'RENT' ? '–ê—Ä–µ–Ω–¥–∞' : '–ü—Ä–æ–¥–∞–∂–∞'}
        
        üìê –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
        ‚Ä¢ –°–ø–∞–ª—å–Ω–∏: ${propertyData.bedrooms || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
        ‚Ä¢ –í–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã: ${propertyData.bathrooms || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
        ‚Ä¢ –ü–ª–æ—â–∞–¥—å: ${propertyData.area ? propertyData.area + ' –º¬≤' : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
        
        ‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: ${propertyData.features && propertyData.features.length > 0 ? propertyData.features.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
        
        üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
        ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${propertyData.views || 0}
        ‚Ä¢ –û—Ç–∑—ã–≤—ã: ${Array.isArray(propertyData.reviews) ? propertyData.reviews.length : 0}
        ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${propertyData.isFeatured ? '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ' : '–û–±—ã—á–Ω–æ–µ'}${propertyData.isVerified ? ', –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ' : ''}
        
        ${propertyData.description ? `\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: ${propertyData.description}` : ''}
      `;

      toast.success("–î–µ—Ç–∞–ª–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω—ã", {
        description: `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ ${propertyData.title} –∑–∞–≥—Ä—É–∂–µ–Ω–∞`,
      });

      return {
        success: true,
        property: propertyData,
        description: description.trim(),
        message: `–ü–æ–ª—É—á–µ–Ω–∞ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ "${propertyData.title}". ${description.trim()}`
      };
    } catch (error) {
      console.error('Error fetching property details:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: ${error}`
      };
    }
  }

  const navigateToQuiz = ({
    city,
    operationType,
    propertyTypes,
    minBudget,
    maxBudget,
    features,
    step = 1
  }: {
    city?: string;
    operationType?: string;
    propertyTypes?: string;
    minBudget?: number;
    maxBudget?: number;
    features?: string;
    step?: number;
  }) => {
    try {
      // –°—Ç—Ä–æ–∏–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –∫–≤–∏–∑–∞
      const params = new URLSearchParams();
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ –∫–≤–∏–∑–∞
      params.set('step', step.toString());
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
      if (city) {
        params.set('city', city);
        params.set('location', city);
      }
      
      if (operationType) {
        params.set('purpose', operationType);
        params.set('operationType', operationType === 'buy' ? 'sale' : operationType);
      }
      
      if (propertyTypes) {
        const types = propertyTypes.split(',').map(t => t.trim());
        params.set('propertyTypes', types.join(','));
      }
      
      if (minBudget !== undefined && maxBudget !== undefined) {
        params.set('minBudget', minBudget.toString());
        params.set('maxBudget', maxBudget.toString());
      }
      
      if (features) {
        const featureList = features.split(',').map(f => f.trim());
        params.set('features', featureList.join(','));
      }

      // –°—Ç—Ä–æ–∏–º URL –¥–ª—è –∫–≤–∏–∑–∞
      const quizUrl = `/quiz?${params.toString()}`;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
      localStorage.setItem('voice-chat-navigation', JSON.stringify({
        path: quizUrl,
        timestamp: Date.now(),
        wasActive: true
      }));

      localStorage.setItem('voice-chat-session-state', JSON.stringify({
        isActive: true,
        timestamp: Date.now(),
        targetPath: quizUrl,
        shouldRestore: true
      }));

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–≤–∏–∑—É
      window.location.href = quizUrl;

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let message = `–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–≤–∏–∑—É –ø–æ –ø–æ–∏—Å–∫—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏`;
      if (city) message += ` –≤ ${city}`;
      if (operationType) message += ` –¥–ª—è ${operationType === 'buy' ? '–ø–æ–∫—É–ø–∫–∏' : '–∞—Ä–µ–Ω–¥—ã'}`;
      if (propertyTypes) message += ` —Ç–∏–ø–∞ ${propertyTypes}`;

      toast.success("–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–≤–∏–∑—É", {
        description: message,
      });

      return {
        success: true,
        quizUrl,
        message: `Navigating to property quiz${city ? ` for ${city}` : ''}${operationType ? ` for ${operationType}` : ''}. The quiz will be pre-filled with your preferences and show matching properties.`
      };
    } catch (error) {
      return {
        success: false,
        message: `Error navigating to quiz: ${error}`
      };
    }
  }

  return {
    timeFunction,
    backgroundFunction,
    partyFunction,
    launchWebsite,
    copyToClipboard,
    scrapeWebsite,
    navigateToPage,
    findProperty,
    getPropertyDetails,
    navigateToQuiz
  }
}